<?xml version="1.0" encoding="UTF-8"?>
<MetadataProvider id="ShibbolethMetadata" xsi:type="ChainingMetadataProvider"
    xmlns="urn:mace:shibboleth:2.0:metadata"
    xmlns:security="urn:mace:shibboleth:2.0:security"
    xmlns:saml="urn:oasis:names:tc:SAML:2.0:assertion"
    xmlns:md="urn:oasis:names:tc:SAML:2.0:metadata"
    xmlns:alg="urn:oasis:names:tc:SAML:metadata:algsupport"
    xmlns:ds="http://www.w3.org/2000/09/xmldsig#"
    xmlns:ds11="http://www.w3.org/2009/xmldsig11#"
    xmlns:enc="http://www.w3.org/2001/04/xmlenc#"
    xmlns:enc11="http://www.w3.org/2009/xmlenc11#"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="urn:mace:shibboleth:2.0:metadata http://shibboleth.net/schema/idp/shibboleth-metadata.xsd
                        urn:mace:shibboleth:2.0:security http://shibboleth.net/schema/idp/shibboleth-security.xsd
                        urn:oasis:names:tc:SAML:2.0:assertion http://docs.oasis-open.org/security/saml/v2.0/saml-schema-assertion-2.0.xsd
                        urn:oasis:names:tc:SAML:2.0:metadata http://docs.oasis-open.org/security/saml/v2.0/saml-schema-metadata-2.0.xsd
                        urn:oasis:names:tc:SAML:metadata:algsupport http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-metadata-algsupport-v1.0.xsd
                        http://www.w3.org/2000/09/xmldsig# http://www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd
                        http://www.w3.org/2009/xmldsig11# http://www.w3.org/TR/2013/REC-xmldsig-core1-20130411/xmldsig11-schema.xsd
                        http://www.w3.org/2001/04/xmlenc# http://www.w3.org/TR/xmlenc-core/xenc-schema.xsd
                        http://www.w3.org/2009/xmlenc11# http://www.w3.org/TR/2013/REC-xmlenc-core1-20130411/xenc-schema-11.xsd"
    sortKey="1">

    <!--
    Below you place the mechanisms which define how to load the metadata for SP(s) you will
    provide service to.
    
    Some simple examples are provided. The documentation provides more details; in most cases,
    the modern replacement for these older plugins are the "DynamicHTTPMetadataProvider" and
    "LocalDynamic" variants, which provide dramatic memory savings and more reliable operation.
     
    NOTE: You do NOT need to load metadata for this IdP itself within this configuration.
    -->
    
    
    
    <!--
    Example HTTP metadata provider.  Use this if you want to download the metadata
    from a remote source.

    You *MUST* provide the SignatureValidationFilter in order to function securely.
    Get the public key certificate from the party publishing the metadata, and validate
    it with them via some out of band mechanism (e.g., a fingerprint on a secure page).

    The EntityRoleWhiteList saves memory by only loading metadata from SAML roles
    that the IdP needs to interoperate with.
    -->
    
    <!--
    <MetadataProvider id="HTTPMetadata"
                      xsi:type="FileBackedHTTPMetadataProvider"
                      backingFile="%{idp.home}/metadata/localCopyFromXYZHTTP.xml"
                      metadataURL="http://WHATEVER"> 
        
        <MetadataFilter xsi:type="SignatureValidation" certificateFile="%{idp.home}/credentials/metaroot.pem" />
        <MetadataFilter xsi:type="RequiredValidUntil" maxValidityInterval="P30D"/>
        <MetadataFilter xsi:type="EntityRoleWhiteList">
            <RetainedRole>md:SPSSODescriptor</RetainedRole>
        </MetadataFilter>
    </MetadataProvider>
    -->   

    <!-- CIL-445 Automatically download AWS metadata -->
    <MetadataProvider id="AWSHTTPMetadata"
                      xsi:type="FileBackedHTTPMetadataProvider"
                      backingFile="%{idp.home}/metadata/saml-metadata.xml"
                      metadataURL="https://signin.aws.amazon.com/static/saml-metadata.xml"> 
        
        <MetadataFilter xsi:type="RequiredValidUntil" maxValidityInterval="P1Y"/>
    </MetadataProvider>

    <!-- Taken from https://spaces.at.internet2.edu/x/hAHvCQ -->
    <!-- InCommon Per-Entity Metadata Distribution Service -->
    <MetadataProvider id="incommon" xsi:type="DynamicHTTPMetadataProvider"
                      maxCacheDuration="PT24H" minCacheDuration="PT10M">
      <!-- Verify the signature on the root element (i.e., the EntityDescriptor element) -->
      <MetadataFilter xsi:type="SignatureValidation" requireSignedRoot="true"
                      certificateFile="%{idp.home}/credentials/inc-md-cert-mdq.pem" />
     
      <!-- Require a validUntil XML attribute no more than 14 days into the future -->
      <MetadataFilter xsi:type="RequiredValidUntil" maxValidityInterval="P14D" />
     
      <!-- The MetadataQueryProtocol element specifies the base URL for the query protocol -->
      <MetadataQueryProtocol>https://mdq.incommon.org/</MetadataQueryProtocol>
    </MetadataProvider>

    <!--
    Example file metadata provider.  Use this if you want to load metadata
    from a local file. You use this if you have some local SPs which are not
    "federated" but you wish to offer a service to.
    
    If you do not provide a SignatureValidation filter, then you have the
    responsibility to ensure that the contents on disk are trustworthy.
    -->
    
    <!--
    <MetadataProvider id="LocalMetadata"  xsi:type="FilesystemMetadataProvider" metadataFile="PATH_TO_YOUR_METADATA"/>
    -->


    <!--
    Example CAS metadata source for managing CAS services using SAML metadata.
    -->

    <!--
    <MetadataProvider id="CASMetadata"
                      xsi:type="FilesystemMetadataProvider"
                      metadataFile="PATH_TO_YOUR_METADATA"
                      indexesRef="shibboleth.CASMetadataIndices" />
    -->

    <!-- dev.cilogon.org Shib SP metadata -->
    <MetadataProvider id="LocalMetadataDev"  xsi:type="FilesystemMetadataProvider" metadataFile="%{idp.home}/metadata/dev-cilogon-metadata.xml">
        <MetadataFilter xsi:type="SignatureValidation" 
             requireSignedRoot="false"
             certificateFile="%{idp.home}/metadata/dev.cilogon.crt" />
    </MetadataProvider>
    
    <!-- sslvpn.ncsa.illinois.edu Shib SP metadata -->
    <MetadataProvider id="LocalMetadataDev"  xsi:type="FilesystemMetadataProvider" metadataFile="%{idp.home}/metadata/sslvpn-ncsa-metadata.xml">
    </MetadataProvider>
    
</MetadataProvider>
